#include "mediaplayer.h"
#include <QDebug>
#include <QFileInfo>
#include <QTimer>

#include <QAudioFormat>      // —Ñ–æ—Ä–º–∞—Ç –∞—É–¥—ñ–æ
#include <QAudioOutput>      // –≤–∏—Ö—ñ–¥
#include <QAudioDevice>      // –ø—Ä–∏—Å—Ç—Ä–æ—ó –≤–∏–≤–æ–¥—É
#include <QMediaDevices>     // –¥–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó



MediaPlayer::MediaPlayer(QWidget *parent)
    : QWidget(parent)
{
    // === Widok wideo (dla plik√≥w MP4, AVI itp.) ===
    videoWidget = new QVideoWidget(this);  // Obiekt do wy≈õwietlania obrazu wideo

    // === Obrazek zastƒôpczy ‚Äî widoczny tylko przy odtwarzaniu plik√≥w audio (np. MP3) ===
    imageLabel = new QLabel(this);
    imageLabel->setAlignment(Qt::AlignCenter);
    QPixmap placeholder("../icons/music-notes.png");
    imageLabel->setPixmap(placeholder.scaled(640, 360, Qt::KeepAspectRatio, Qt::SmoothTransformation));
    imageLabel->setVisible(false);  // Ukryty na start

    rewindButton = new QPushButton("‚è™", this);   // Cofnij 10 sekund
    playPauseButton = new QPushButton(this);     // Przycisk do pauzy/startu
    playPauseButton->setIcon(QIcon("../icons/play_button_proj.png"));
    playPauseButton->setIconSize(QSize(30, 30)); // Ikona startowa: play

    forwardButton = new QPushButton("‚è©", this);  // Do przodu 10 sekund
    playlistButton = new QPushButton("üìÇ", this); // Poka≈º/ukryj playlistƒô
    prevTrackButton = new QPushButton("‚èÆ", this); // Poprzedni utw√≥r
    nextTrackButton = new QPushButton("‚è≠", this); // Nastƒôpny utw√≥r

    // Wszystkie przyciski sƒÖ "p≈Çaskie", bez ramki

    prevTrackButton->setFlat(true);
    nextTrackButton->setFlat(true);
    rewindButton->setFlat(true);
    playPauseButton->setFlat(true);
    forwardButton->setFlat(true);
    playlistButton->setFlat(true);

    QLabel *soundIcon = new QLabel(this);
    QPixmap soundPixmap("../icons/volume_icon.png"); 
    soundIcon->setPixmap(soundPixmap.scaled(20, 20, Qt::KeepAspectRatio, Qt::SmoothTransformation));

    // === Suwak postƒôpu odtwarzania (czas wideo/audio) ===
    progressSlider = new QSlider(Qt::Horizontal, this);
    // Tworzymy poziomy suwak, kt√≥ry bƒôdzie pokazywa≈Ç bie≈ºƒÖcy czas odtwarzania
    // oraz pozwala≈Ç u≈ºytkownikowi przewinƒÖƒá do wybranego miejsca w pliku

    // === Suwak g≈Ço≈õno≈õci ===
    volumeSlider = new QSlider(Qt::Horizontal, this);
    // Tworzymy poziomy suwak s≈Çu≈ºƒÖcy do regulacji g≈Ço≈õno≈õci
    volumeSlider->setRange(0, 100);    // Zakres od 0 (cisza) do 100 (maksymalna g≈Ço≈õno≈õƒá)
    volumeSlider->setValue(100);       // Domy≈õlna warto≈õƒá to 100%

    // === Wy≈õwietlacz czasu odtwarzania ===
    timeDisplay = new QLabel("00:00:00 / 00:00:00", this);
    // Etykieta tekstowa, kt√≥ra pokazuje aktualny czas odtwarzania i ca≈Çkowity czas
    timeDisplay->setAlignment(Qt::AlignRight);  // Wyr√≥wnanie tekstu do prawej
    timeDisplay->setStyleSheet("font-family: monospace; font-size: 14px;");
    // Ustawiamy czcionkƒô monospace (sta≈Çej szeroko≈õci) dla czytelno≈õci

    // === Konfiguracja systemu audio ===
    QAudioDevice device = QMediaDevices::defaultAudioOutput();
    // Pobieramy domy≈õlne urzƒÖdzenie wyj≈õciowe audio (np. g≈Ço≈õniki)
    audioOutput = new QAudioOutput(device, this);
    // Tworzymy obiekt audio zwiƒÖzany z tym urzƒÖdzeniem
    audioOutput->setVolume(1.0); // G≈Ço≈õno≈õƒá ustawiona na 100% (1.0)

    // === G≈Ç√≥wny obiekt odtwarzacza multimedi√≥w ===
    mediaPlayer = new QMediaPlayer(this);
    // Inicjalizujemy QMediaPlayer ‚Äî g≈Ç√≥wny komponent do odtwarzania wideo/audio

    // Przypisujemy wid≈ºet wideo do odtwarzacza (je≈õli plik zawiera obraz)
    mediaPlayer->setVideoOutput(videoWidget);

    // Przypisujemy wyj≈õcie d≈∫wiƒôku (g≈Ço≈õniki/s≈Çuchawki) do odtwarzacza
    mediaPlayer->setAudioOutput(audioOutput);


    // Panel boczny z playlistƒÖ (na poczƒÖtku ukryty)
    playlistPanel = new QFrame(this);
    playlistPanel->setFrameShape(QFrame::StyledPanel);
    playlistPanel->setStyleSheet("background-color: #10152A; color: white;");
    playlistPanel->setVisible(false);

    // Layout wewnƒôtrzny playlisty
    QVBoxLayout *playlistLayout = new QVBoxLayout(playlistPanel);
    QLabel *playlistTitle = new QLabel("Playlist", playlistPanel);
    playlistTitle->setStyleSheet("font-weight: bold; font-size: 16px;");

    // Przyciski dodawania i usuwania plik√≥w z playlisty
    addToPlaylistButton = new QPushButton("‚ûï", playlistPanel);
    addToPlaylistButton->setFixedSize(24, 24);
    addToPlaylistButton->setFlat(true);

    removeFromPlaylistButton = new QPushButton("‚ûñ", playlistPanel);
    removeFromPlaylistButton->setFixedSize(24, 24);
    removeFromPlaylistButton->setFlat(true);

    // Przycisk powrotu do menu g≈Ç√≥wnego
    QPushButton *backButton = new QPushButton("Back to Menu", this);
    backButton->setFixedSize(100, 30);
    connect(backButton, &QPushButton::clicked, this, [=]() {
        emit backToMenuRequested();  // Sygna≈Ç do MainWindow
    });

    // Pasek nag≈Ç√≥wka playlisty: tytu≈Ç + przyciski
    QHBoxLayout *playlistHeader = new QHBoxLayout();
    playlistHeader->addWidget(playlistTitle);
    playlistHeader->addStretch();
    playlistHeader->addWidget(removeFromPlaylistButton);
    playlistHeader->addWidget(addToPlaylistButton);

    // Lista element√≥w multimedialnych
    playlistWidget = new QListWidget(playlistPanel);
    playlistWidget->setStyleSheet("background-color: #0A0F22; color: white;");

    // Umieszczenie nag≈Ç√≥wka i listy w layoucie playlisty
    playlistLayout->addLayout(playlistHeader);
    playlistLayout->addWidget(playlistWidget);
    playlistPanel->setFixedWidth(300); // szeroko≈õƒá panelu

    // Uk≈Çad g≈Ç√≥wny interfejsu

    // G≈Ç√≥wne pionowe u≈Ço≈ºenie
    QVBoxLayout *mainLayout = new QVBoxLayout(this);

    // Uk≈Çad poziomy: wideo + playlista
    QHBoxLayout *videoLayout = new QHBoxLayout();
    mediaStack = new QStackedLayout();  // Stos: obrazek lub wideo
    mediaStack->addWidget(videoWidget);
    mediaStack->addWidget(imageLabel);
    videoLayout->addLayout(mediaStack);
    videoLayout->addWidget(playlistPanel);

    // Suwak postƒôpu
    QHBoxLayout *progressLayout = new QHBoxLayout();
    progressLayout->addWidget(progressSlider);

    // Czas + przycisk playlisty
    QHBoxLayout *timeLayout = new QHBoxLayout();
    timeLayout->addWidget(timeDisplay);
    timeLayout->addStretch();
    timeLayout->addWidget(playlistButton);

    // Panel sterowania: przyciski
    QHBoxLayout *controlsLayout = new QHBoxLayout();
    controlsLayout->addStretch();
    controlsLayout->addWidget(prevTrackButton);
    controlsLayout->addWidget(rewindButton);
    controlsLayout->addWidget(playPauseButton);
    controlsLayout->addWidget(forwardButton);
    controlsLayout->addWidget(nextTrackButton);
    controlsLayout->addStretch();
    controlsLayout->addWidget(soundIcon);
    controlsLayout->addSpacing(5);
    controlsLayout->addWidget(volumeSlider);
    controlsLayout->addWidget(playlistButton);

    // Przycisk powrotu na dole
    QHBoxLayout *bottomLayout = new QHBoxLayout();
    bottomLayout->addWidget(backButton, 0, Qt::AlignLeft);
    bottomLayout->addStretch();

    // Dodanie layout√≥w do g≈Ç√≥wnego
    mainLayout->addLayout(videoLayout, 9);
    mainLayout->addLayout(progressLayout);
    mainLayout->addLayout(timeLayout);
    mainLayout->addLayout(controlsLayout);
    mainLayout->addLayout(bottomLayout);

    // Finalizacja
    setLayout(mainLayout);
    showMaximized();
    setWindowTitle("Qt Media Player");


        // === Po≈ÇƒÖczenia przycisk√≥w sterujƒÖcych ===
    connect(playPauseButton, &QPushButton::clicked, this, &MediaPlayer::togglePlayPause);  // Play/Pause
    connect(rewindButton, &QPushButton::clicked, this, &MediaPlayer::rewind);              // Cofnij 10s
    connect(forwardButton, &QPushButton::clicked, this, &MediaPlayer::fastForward);        // Do przodu 10s

    // === Zmiana g≈Ço≈õno≈õci na podstawie suwaka ===
    connect(volumeSlider, &QSlider::valueChanged, [=](int value) {
        audioOutput->setVolume(value / 100.0);
    });

    // === Przesuwanie odtwarzania przez suwak postƒôpu ===
    connect(progressSlider, &QSlider::sliderMoved, [=](int value) {
        mediaPlayer->setPosition(value * 1000); // sekundy ‚Üí ms
    });

    // === Aktualizacje suwaka i zegara podczas odtwarzania ===
    connect(mediaPlayer, &QMediaPlayer::positionChanged, this, &MediaPlayer::updatePosition);
    connect(mediaPlayer, &QMediaPlayer::durationChanged, this, &MediaPlayer::updateDuration);

    // === Poka≈º/ukryj playlistƒô po klikniƒôciu przycisku üìÇ ===
    connect(playlistButton, &QPushButton::clicked, [=]() {
        isPlaylistVisible = !isPlaylistVisible;
        playlistPanel->setVisible(isPlaylistVisible);
    });

    // === Dodanie pliku do playlisty (z okna dialogowego) ===
    connect(addToPlaylistButton, &QPushButton::clicked, [=]() {
        QString fileName = QFileDialog::getOpenFileName(this, "Add to Playlist",
                                                        QDir::homePath(),
                                                        "Media Files (*.mp3 *.mp4 *.wav *.avi *.mkv *.mov)");
        if (!fileName.isEmpty()) {
            QListWidgetItem *item = new QListWidgetItem(QFileInfo(fileName).fileName());
            item->setData(Qt::UserRole, fileName);
            playlistWidget->addItem(item);
        }
    });

    // === Usuwanie zaznaczonego pliku z playlisty ===
    connect(removeFromPlaylistButton, &QPushButton::clicked, [=]() {
        QListWidgetItem *selectedItem = playlistWidget->currentItem();
        if (selectedItem) {
            int row = playlistWidget->row(selectedItem);
            delete playlistWidget->takeItem(row);
            // Obs≈Çuga sytuacji gdy usuniƒôto aktualnie odtwarzany plik
            if (row == currentPlaylistIndex) {
                mediaPlayer->stop();
                playPauseButton->setIcon(QIcon("../icons/play_button_proj.png"));
                currentPlaylistIndex = -1;
            } else if (row < currentPlaylistIndex) {
                currentPlaylistIndex--;
            }
        }
    });

    // === Przej≈õcie do poprzedniego/nastƒôpnego utworu ===
    connect(prevTrackButton, &QPushButton::clicked, this, &MediaPlayer::previousTrack);
    connect(nextTrackButton, &QPushButton::clicked, this, &MediaPlayer::nextTrack);

    // === Odtw√≥rz plik po klikniƒôciu na li≈õcie ===
    connect(playlistWidget, &QListWidget::itemClicked, [=](QListWidgetItem *item) {
        int index = playlistWidget->row(item);
        playItemAtIndex(index);
    });
}

MediaPlayer::~MediaPlayer() {}

// === Otwieranie pliku multimedialnego przez okno dialogowe ===
void MediaPlayer::openFile() {
    QString fileName = QFileDialog::getOpenFileName(this, "Open Media File",
                                                    QDir::homePath(),
                                                    "Media Files (*.mp3 *.mp4 *.wav *.avi *.mkv)");
    if (!fileName.isEmpty()) {
        mediaPlayer->setSource(QUrl::fromLocalFile(fileName)); // ustawienie ≈∫r√≥d≈Ça
        mediaPlayer->play();                                   // rozpoczƒôcie odtwarzania
        updateMediaDisplay();                                  // poka≈º obraz/wideo
        playPauseButton->setIcon(QIcon("../icons/stop_button_proj.png"));
    }
}


// === Odtw√≥rz plik z playlisty wed≈Çug indeksu ===
void MediaPlayer::playItemAtIndex(int index) {
    if (index >= 0 && index < playlistWidget->count()) {
        currentPlaylistIndex = index;
        playlistWidget->setCurrentRow(currentPlaylistIndex);

        QString filePath = playlistWidget->item(index)->data(Qt::UserRole).toString();
        mediaPlayer->setSource(QUrl::fromLocalFile(filePath));

        // Od≈õwie≈º widok i rozpocznij odtwarzanie z ma≈Çym op√≥≈∫nieniem
        QTimer::singleShot(150, this, [=]() { updateMediaDisplay(); });
        QTimer::singleShot(100, this, [=]() {
            mediaPlayer->setPosition(100);
            mediaPlayer->play();
        });

        playPauseButton->setIcon(QIcon("../icons/stop_button_proj.png"));
    }
}

// === Przewijanie do przodu o 10 sekund ===
void MediaPlayer::fastForward() {
    mediaPlayer->setPosition(mediaPlayer->position() + 10000);
}

// === Cofanie o 10 sekund ===
void MediaPlayer::rewind() {
    mediaPlayer->setPosition(mediaPlayer->position() - 10000);
}

// === Zwiƒôkszanie g≈Ço≈õno≈õci o 5 ===
void MediaPlayer::increaseVolume() {
    int value = volumeSlider->value();
    if (value < 100) {
        value += 5;
        volumeSlider->setValue(qMin(value, 100));
    }
}

// === Zmniejszanie g≈Ço≈õno≈õci o 5 ===
void MediaPlayer::decreaseVolume() {
    int value = volumeSlider->value();
    if (value > 0) {
        value -= 5;
        volumeSlider->setValue(qMax(value, 0));
    }
}

// === Prze≈ÇƒÖczanie widoku ‚Äî wideo lub obrazek muzyczny ===
void MediaPlayer::updateMediaDisplay() {
    if (mediaPlayer->hasVideo()) {
        mediaStack->setCurrentWidget(videoWidget);
    } else {
        mediaStack->setCurrentWidget(imageLabel);
    }
}

// === Pauza / odtwarzanie + zmiana ikony ===
void MediaPlayer::togglePlayPause() {
    if (mediaPlayer->playbackState() == QMediaPlayer::PlayingState) {
        mediaPlayer->pause();
        playPauseButton->setIcon(QIcon("../icons/play_button_proj.png"));
    } else {
        mediaPlayer->play();
        playPauseButton->setIcon(QIcon("../icons/stop_button_proj.png"));
    }
}

// === Przejd≈∫ do nastƒôpnego utworu na playli≈õcie ===
void MediaPlayer::nextTrack() {
    if (currentPlaylistIndex < playlistWidget->count() - 1)
        playItemAtIndex(currentPlaylistIndex + 1);
}

// === Przejd≈∫ do poprzedniego utworu na playli≈õcie ===
void MediaPlayer::previousTrack() {
    if (currentPlaylistIndex > 0)
        playItemAtIndex(currentPlaylistIndex - 1);
}

// === Ustaw maksymalny czas suwaka postƒôpu ===
void MediaPlayer::updateDuration(qint64 duration) {
    totalDuration = duration;
    progressSlider->setMaximum(duration / 1000); // w sekundach
}

// === Aktualizacja pozycji suwaka i wy≈õwietlacza czasu ===
void MediaPlayer::updatePosition(qint64 position) {
    int currentSecs = position / 1000;
    int totalSecs = totalDuration / 1000;

    progressSlider->setValue(currentSecs);

    QTime currentTime(0, 0, 0);
    currentTime = currentTime.addSecs(currentSecs);
    QTime totalTime(0, 0, 0);
    totalTime = totalTime.addSecs(totalSecs);

    QString timeStr = currentTime.toString("hh:mm:ss") + " / " + totalTime.toString("hh:mm:ss");
    timeDisplay->setText(timeStr);
}