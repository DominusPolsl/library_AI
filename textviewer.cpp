#include "textviewer.h"         
#include <QFileDialog>          // Okno dialogowe do wyboru pliku
#include <QMessageBox>          // Komunikaty b≈Çƒôd√≥w
#include <QPixmap>              // Do konwersji obrazu PDF do wy≈õwietlenia
#include <QDir>                 // ≈öcie≈ºki katalog√≥w

// Inicjalizacja interfejsu u≈ºytkownika i ≈ÇƒÖczenie przycisk√≥w z odpowiednimi funkcjami
TextViewer::TextViewer(QWidget *parent)
    : QWidget(parent), currentPage(0)  // Ustawiamy aktualnƒÖ stronƒô na 0
{
    // Tworzenie obiektu reprezentujƒÖcego dokument PDF
    pdfDoc = new QPdfDocument(this);

    // Etykieta do wy≈õwietlania strony jako obrazu
    pageLabel = new QLabel(this);
    pageLabel->setAlignment(Qt::AlignTop | Qt::AlignHCenter); // Wy≈õrodkowanie poziome, wyr√≥wnanie do g√≥ry
    pageLabel->setMinimumSize(400, 600);                      // Minimalny rozmiar widoku strony
    pageLabel->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding); // Automatyczne skalowanie

    // Tworzenie przycisk√≥w interfejsu
    openButton = new QPushButton("üìÅ File", this);      // Otw√≥rz plik PDF
    prevButton = new QPushButton("‚Üê", this);           // Poprzednia strona
    nextButton = new QPushButton("‚Üí", this);           // Nastƒôpna strona
    QPushButton *backButton = new QPushButton("Back to Menu", this); // Powr√≥t do menu
    backButton->setFixedSize(120, 30);                 

     // Ustawienie szeroko≈õci przycisk√≥w nawigacyjnych (po≈Çowa standardowej szeroko≈õci)
    int halfWidth = 60;
    prevButton->setFixedWidth(halfWidth);
    nextButton->setFixedWidth(halfWidth);

    // === RzƒÖd (poziomy uk≈Çad) dla przycisk√≥w nawigacyjnych stron PDF ===
    QHBoxLayout *pageNavRow = new QHBoxLayout();      // Tworzymy uk≈Çad poziomy
    pageNavRow->setSpacing(5);                        // Ustawiamy odstƒôp 5 pikseli miƒôdzy przyciskami
    // Dodawanie Przycisk√≥w zmiany strony
    pageNavRow->addWidget(prevButton);                
    pageNavRow->addWidget(nextButton);                
    // Wyr√≥wnanie przycisk√≥ do lewej strony
    pageNavRow->setAlignment(Qt::AlignLeft);

    // Lewy panel boczny z przyciskami (wertykalnie u≈Ço≈ºony)
    QVBoxLayout *leftBar = new QVBoxLayout();
    leftBar->setContentsMargins(10, 10, 10, 10);        // Marginesy wok√≥≈Ç przycisk√≥w
    leftBar->setSpacing(10);                           // Odstƒôpy miƒôdzy przyciskami
    leftBar->addWidget(backButton);                    
    leftBar->addWidget(openButton);                    
    leftBar->addLayout(pageNavRow);                                       
    leftBar->addStretch();                             // Wype≈Çnienie pustej przestrzeni poni≈ºej

    // G≈Ç√≥wna sekcja wy≈õwietlania PDF
    QVBoxLayout *pdfLayout = new QVBoxLayout();        // Uk≈Çad pionowy (tylko strona PDF)
    pdfLayout->setContentsMargins(0, 10, 10, 10);
    pdfLayout->setSpacing(0);
    pdfLayout->addWidget(pageLabel);                   

    // G≈Ç√≥wny uk≈Çad aplikacji: poziomy podzia≈Ç ‚Äî lewa kolumna + prawa sekcja
    QHBoxLayout *mainLayout = new QHBoxLayout(this);
    mainLayout->setContentsMargins(0, 0, 0, 0);         // Bez zewnƒôtrznych margines√≥w
    mainLayout->setSpacing(0);                          // Bez przerwy miƒôdzy kolumnami
    mainLayout->addLayout(leftBar);                     // Panel z przyciskami
    mainLayout->addLayout(pdfLayout, 1);                // PDF zajmuje resztƒô miejsca

    setLayout(mainLayout);                              // Ustawienie uk≈Çadu jako g≈Ç√≥wnego

    // Po≈ÇƒÖczenie sygna≈Ç√≥w z funkcjami
    connect(backButton, &QPushButton::clicked, this, [this]() {
        emit backToMenuRequested();                     // Wysy≈Çanie sygna≈Çu do Mainwindow, ≈ºeby wr√≥ciƒá do g≈Ç√≥wnego menu
    });

    connect(openButton, &QPushButton::clicked, this, &TextViewer::openPdf);   // Pod≈ÇƒÖczenie sygna≈Çu klikniƒôcia przycisku openButton do funkcji openPdf() w klasie TextViewer
    connect(prevButton, &QPushButton::clicked, this, &TextViewer::prevPage);  
    connect(nextButton, &QPushButton::clicked, this, &TextViewer::nextPage);  
}

// Funkcja otwierajƒÖca i wczytujƒÖca plik PDF
void TextViewer::openPdf() {
    // Okno dialogowe do wyboru pliku PDF
    QString fileName = QFileDialog::getOpenFileName(
        this, "Open PDF", QDir::homePath(), "PDF files (*.pdf)"
    );

    if (fileName.isEmpty()) return;  // Je≈õli anulowano wyb√≥r, wtedy nic nie bƒôdzie zrobione

    // Pr√≥ba za≈Çadowania pliku PDF
    QPdfDocument::Error err = pdfDoc->load(fileName);
    if (err != QPdfDocument::Error::None) {
        // Je≈õli wystƒÖpi≈Ç b≈ÇƒÖd - wy≈õwietli siƒô komunikat
        QMessageBox::critical(this, "Error", "Failed to load PDF file.");
        return;
    }

    currentPage = 0;  // Resetujemy do pierwszej strony
    showPage();       // Wy≈õwietlenie strony
}


// Funkcja renderujƒÖca aktualnƒÖ stronƒô PDF i wy≈õwietlajƒÖca jƒÖ jako obraz
void TextViewer::showPage() {
    if (!pdfDoc || pdfDoc->pageCount() <= 0) return;  // Koniec metody przy braku dokumentu

    QSize imageSize(1300, 1000);                      // Rozdzielczo≈õƒá renderowania strony
    QPdfDocumentRenderOptions options;                // Opcje renderowania (domy≈õlne)

    // Renderowanie aktualnej strony jako obrazu
    QImage image = pdfDoc->render(currentPage, imageSize, options);

    if (image.isNull()) {
        // Je≈õli nie uda≈Ço siƒô wyrenderowaƒá, to pakazuje siƒô b≈ÇƒÖd
        QMessageBox::warning(this, "Error", "Unable to render PDF page.");
        return;
    }

    // Przekszta≈Çcenie QImage na QPixmap i wy≈õwietlenie w etykiecie
    pageLabel->setPixmap(QPixmap::fromImage(image));
}


// Przej≈õcie do nastƒôpnej strony (je≈õli nie jest koniec pliku)
void TextViewer::nextPage() {
    if (currentPage + 1 < pdfDoc->pageCount()) {
        ++currentPage;
        showPage();
    }
}

// Przej≈õcie do poprzedniej strony (je≈õli nie jest to poczƒÖtek pliku) 
void TextViewer::prevPage() {
    if (currentPage > 0) {
        --currentPage;
        showPage();
    }
}
